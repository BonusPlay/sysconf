# Auto-generated using compose2nix v0.3.2-pre.
{ pkgs, lib, config, ... }:
{
  virtualisation.oci-containers.containers."changedetect-browser-sockpuppet-chrome" = {
    image = "dgtlmoon/sockpuppetbrowser:latest";
    environment = {
      MAX_CONCURRENT_CHROME_PROCESSES = "10";
      SCREEN_DEPTH = "16";
      SCREEN_HEIGHT = "1024";
      SCREEN_WIDTH = "1920";
    };
    log-driver = "journald";
    extraOptions = [
      "--hostname=browser-sockpuppet-chrome"
      "--network-alias=browser-sockpuppet-chrome"
      "--network=changedetect_default"
    ];
  };
  systemd.services."podman-changedetect-browser-sockpuppet-chrome" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
    };
    after = [
      "podman-network-changedetect_default.service"
    ];
    requires = [
      "podman-network-changedetect_default.service"
    ];
    partOf = [
      "podman-compose-changedetect-root.target"
    ];
    wantedBy = [
      "podman-compose-changedetect-root.target"
    ];
  };
  virtualisation.oci-containers.containers."changedetection" = {
    image = "ghcr.io/dgtlmoon/changedetection.io";
    environment = {
      ALLOW_FILE_URI = "False";
      BASE_URL = "https://detect.bonus.re";
      DISABLE_VERSION_CHECK = "true";
      HIDE_REFERER = "true";
      LISTEN_HOST = "0.0.0.0";
      PLAYWRIGHT_DRIVER_URL = "ws://browser-sockpuppet-chrome:3000";
      PORT = "5000";
      TZ = "Europe/Warsaw";
      USE_X_SETTINGS = "1";
    };
    volumes = [
      "/var/lib/change-detection:/datastore:rw"
    ];
    ports = [
      "127.0.0.1:5000:5000/tcp"
    ];
    dependsOn = [
      "changedetect-browser-sockpuppet-chrome"
    ];
    log-driver = "journald";
    extraOptions = [
      "--hostname=changedetection"
      "--network-alias=changedetection"
      "--network=changedetect_default"
    ];
  };
  systemd.services."podman-changedetection" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "no";
    };
    after = [
      "podman-network-changedetect_default.service"
    ];
    requires = [
      "podman-network-changedetect_default.service"
    ];
    partOf = [
      "podman-compose-changedetect-root.target"
    ];
    wantedBy = [
      "podman-compose-changedetect-root.target"
    ];
  };

  # Networks
  systemd.services."podman-network-changedetect_default" = {
    path = [ pkgs.podman ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "podman network rm -f changedetect_default";
    };
    script = ''
      podman network inspect changedetect_default || podman network create changedetect_default
    '';
    partOf = [ "podman-compose-changedetect-root.target" ];
    wantedBy = [ "podman-compose-changedetect-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."podman-compose-changedetect-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };

  custom.caddy.entries = [
    {
      entrypoints = [ "10.0.0.131" ];
      domain = "change.bonus.re";
      port = lib.strings.toInt config.virtualisation.oci-containers.containers."changedetection".environment.PORT;
    }
  ];
}
